head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2015.03.13.06.44.16;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.03.13.06.44.00;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.03.13.06.42.21;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: cix-server.cpp,v 1.2 2015-03-12 23:44:00-07 - - $
// Brad Cardello (bcardell)
// Shayan Farmani (sfarmani)
// asg5

#include <iostream>
#include <fstream>
using namespace std;

#include <libgen.h>

#include "cix_protocol.h"
#include "logstream.h"
#include "signal_action.h"
#include "sockets.h"

logstream log (cout);

// reply_ls
void reply_ls (accepted_socket& client_sock, cix_header& header) {
   FILE* ls_pipe = popen ("ls -l", "r");
   if (ls_pipe == NULL) {
      log << "ls -l: popen failed: " << strerror (errno) << endl;
      header.cix_command = CIX_NAK;
      header.cix_nbytes = errno;
      send_packet (client_sock, &header, sizeof header);
   }
   string ls_output;
   char buffer[0x1000];
   for (;;) {
      char* rc = fgets (buffer, sizeof buffer, ls_pipe);
      if (rc == nullptr) break;
      ls_output.append (buffer);
   }
   header.cix_command = CIX_LSOUT;
   header.cix_nbytes = ls_output.size();
   memset (header.cix_filename, 0, CIX_FILENAME_SIZE);
   log << "sending header " << header << endl;
   send_packet (client_sock, &header, sizeof header);
   send_packet (client_sock, ls_output.c_str(), ls_output.size());
   log << "sent " << ls_output.size() << " bytes" << endl;
}

// reply_put
void reply_put (accepted_socket& client_sock, cix_header& header) {
   char buffer[header.cix_nbytes + 1];
   recv_packet (client_sock, buffer, header.cix_nbytes);
   log << "received " << header.cix_nbytes << " bytes" << endl;
   buffer[header.cix_nbytes] = '\0';
   ofstream ofs {header.cix_filename};
   if(ofs.fail()){
      log << header.cix_filename
          <<": ifstream failed: "
          << strerror (errno)
          << endl;
      header.cix_command = CIX_NAK;
      header.cix_nbytes = errno;
      send_packet (client_sock, &header, sizeof header);
   }
   ofs.write (buffer, sizeof buffer);
   ofs.close();
   log << header.cix_filename<<" has been created"<< endl; 
   header.cix_command = CIX_ACK;
   memset (header.cix_filename, 0, CIX_FILENAME_SIZE);
   header.cix_nbytes = 0;
   log << "sending header " << header << endl;
   send_packet (client_sock, &header, sizeof header);
}

// reply_get
void reply_get (accepted_socket& client_sock, cix_header& header) {
   ifstream ifs;
   ifs.open(header.cix_filename, fstream::in);
   string get_output;
   if (!ifs.good()){
      log << header.cix_filename 
          << ": No such file or directory"
          << endl;
      header.cix_command = CIX_NAK;
   }
   else{
      while (!ifs.eof()){
         char buffer[0x1000];
         ifs.read (buffer, sizeof buffer);
         get_output.append (buffer);
      }
      ifs.close();
      header.cix_nbytes = get_output.size();
      header.cix_command = CIX_FILE;
      log << "sending file " << header << endl;
      send_packet (client_sock, &header, sizeof header);
      send_packet(client_sock, get_output.c_str(), header.cix_nbytes);
      log << "sent " << header.cix_nbytes << " bytes" << endl;
   }
}

void reply_rm(accepted_socket& client_sock, cix_header& header){
   string command = "unlink ";
   command.append(header.cix_filename);
   
   FILE* rm_pipe = popen(command.c_str(), "r");
   if (rm_pipe == NULL) {
      log << "rm: popen failed: " << strerror (errno) << endl;
      header.cix_command = CIX_NAK;
      header.cix_nbytes = errno;
      send_packet (client_sock, &header, sizeof header);
   }
   string rm_output;
   char buffer[0x1000];
   for (;;) {
      char* rc = fgets (buffer, sizeof buffer, rm_pipe);
      if (rc == nullptr) break;
      rm_output.append (buffer);
   }
   header.cix_command = CIX_ACK;
   header.cix_nbytes = rm_output.size();
   log << "sending header " << header << endl;
   send_packet (client_sock, &header, sizeof header);
   log << "deleted " << header.cix_filename << endl;
}


bool SIGINT_throw_cix_exit = false;
void signal_handler (int signal) {
   log << "signal_handler: caught " << strsignal (signal) << endl;
   switch (signal) {
      case SIGINT: case SIGTERM: SIGINT_throw_cix_exit = true; break;
      default: break;
   }
}

int main (int argc, char** argv) {
   log.execname (basename (argv[0]));
   log << "starting" << endl;
   vector<string> args (&argv[1], &argv[argc]);
   signal_action (SIGINT, signal_handler);
   signal_action (SIGTERM, signal_handler);
   int client_fd = args.size() == 0 ? -1 : stoi (args[0]);
   log << "starting client_fd " << client_fd << endl;
   try {
      accepted_socket client_sock (client_fd);
      log << "connected to " << to_string (client_sock) << endl;
      for (;;) {
         if (SIGINT_throw_cix_exit) throw cix_exit();
         cix_header header;
         recv_packet (client_sock, &header, sizeof header);
         log << "received header " << header << endl;
         switch (header.cix_command) {
            case CIX_LS:
               reply_ls (client_sock, header);
               break;
            case CIX_PUT:
               reply_put (client_sock, header);
               break;
            case CIX_RM:
               reply_rm (client_sock, header);
               break;
            case CIX_GET:
               reply_get (client_sock, header);
               break;
            default:
               log << "invalid header from client" << endl;
               log << "cix_nbytes = " << header.cix_nbytes << endl;
               log << "cix_command = " << header.cix_command << endl;
               log << "cix_filename = " << header.cix_filename << endl;
               break;
         }
      }
   }catch (socket_error& error) {
      log << error.what() << endl;
   }catch (cix_exit& error) {
      log << "caught cix_exit" << endl;
   }
   log << "finishing" << endl;
   return 0;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cix-server.cpp,v 1.7 2014-07-25 12:12:51-07 - - $
d93 1
a93 1
      log << "sent " << header.cix_nbytes << " bytes" << endl;
@


1.1
log
@-
@
text
@d52 4
a55 1
      log << header.cix_filename<<": ifstream failed: " << strerror (errno) << endl;
d76 3
a78 1
      log << header.cix_filename << ": No such file or directory" << endl;
@
